-- Enhanced trigger with more detailed status tracking (UPDATED for new table structure)
CREATE OR REPLACE FUNCTION notify_video_update()
RETURNS TRIGGER AS $$
DECLARE
    payload JSONB;
BEGIN
    IF (TG_OP = 'INSERT') THEN
        -- Handle new submission
        IF (TG_TABLE_NAME = 'video_submissions') THEN
            payload := jsonb_build_object(
                'event', 'new_submission',
                'id', NEW.id,
                'volunteer_name', (SELECT first_name FROM volunteers WHERE id = NEW.volunteer_id),
                'status', NEW.status,
                'received_at', NEW.created_at,
                'video_url', NEW.video_platform_url,
                'previous_status', null
            );
            PERFORM pg_notify('video_updates', payload::text);
            
        -- Handle new assignment
        ELSIF (TG_TABLE_NAME = 'video_assignments') THEN
            payload := jsonb_build_object(
                'event', 'assignment_created',
                'assignment_id', NEW.id,
                'video_submission_id', NEW.video_submission_id,
                'assigned_editor_id', NEW.assigned_editor_id,
                'assigned_manager_id', NEW.assigned_manager_id,
                'status', NEW.status,
                'assigned_at', NEW.assigned_at,
                'volunteer_name', (SELECT first_name FROM volunteers v 
                                  JOIN video_submissions vs ON vs.volunteer_id = v.id 
                                  WHERE vs.id = NEW.video_submission_id)
            );
            PERFORM pg_notify('video_updates', payload::text);
        END IF;
        
    ELSIF (TG_OP = 'UPDATE') THEN
        -- Handle submission status updates
        IF (TG_TABLE_NAME = 'video_submissions') THEN
            -- Notify on status change or video_url change (REMOVED assigned_editor_id check)
            IF NEW.status IS DISTINCT FROM OLD.status 
               OR NEW.video_platform_url IS DISTINCT FROM OLD.video_platform_url THEN
                
                payload := jsonb_build_object(
                    'event', 'status_update',
                    'id', NEW.id,
                    'status', NEW.status,
                    'previous_status', OLD.status,
                    'video_url', NEW.video_platform_url,
                    'volunteer_name', (SELECT first_name FROM volunteers WHERE id = NEW.volunteer_id)
                );
                PERFORM pg_notify('video_updates', payload::text);
            END IF;
            
        -- Handle assignment updates
        ELSIF (TG_TABLE_NAME = 'video_assignments') THEN
            IF NEW.status IS DISTINCT FROM OLD.status 
               OR NEW.completed_video_url IS DISTINCT FROM OLD.completed_video_url 
               OR NEW.assigned_editor_id IS DISTINCT FROM OLD.assigned_editor_id THEN
                
                payload := jsonb_build_object(
                    'event', 'assignment_updated',
                    'assignment_id', NEW.id,
                    'video_submission_id', NEW.video_submission_id,
                    'status', NEW.status,
                    'previous_status', OLD.status,
                    'assigned_editor_id', NEW.assigned_editor_id,
                    'completed_video_url', NEW.completed_video_url,
                    'completed_at', NEW.completed_at,
                    'volunteer_name', (SELECT first_name FROM volunteers v 
                                      JOIN video_submissions vs ON vs.volunteer_id = v.id 
                                      WHERE vs.id = NEW.video_submission_id)
                );
                PERFORM pg_notify('video_updates', payload::text);
            END IF;
        END IF;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Drop and recreate triggers for both tables
DROP TRIGGER IF EXISTS video_submission_updates ON video_submissions;
CREATE TRIGGER video_submission_updates
AFTER INSERT OR UPDATE ON video_submissions
FOR EACH ROW
EXECUTE FUNCTION notify_video_update();

-- Create trigger for video_assignments table
DROP TRIGGER IF EXISTS video_assignment_updates ON video_assignments;
CREATE TRIGGER video_assignment_updates
AFTER INSERT OR UPDATE ON video_assignments
FOR EACH ROW
EXECUTE FUNCTION notify_video_update();
---------------------------------------------------
SELECT * FROM public.video_submissions
ORDER BY id ASC 
SELECT * FROM public.video_assignments



-- Create function to notify assignment updates
CREATE OR REPLACE FUNCTION notify_assignment_update()
RETURNS TRIGGER AS $$
DECLARE
    payload JSONB;
    editor_name TEXT;
    submission_details RECORD;
BEGIN
    -- Get editor name and submission details
    SELECT 
        u.full_name,
        vs.id as submission_id,
        v.first_name as volunteer_name,
        vs.video_platform_url,
        vs.status as submission_status
    INTO editor_name, submission_details
    FROM users u
    JOIN video_submissions vs ON vs.id = COALESCE(NEW.video_submission_id, OLD.video_submission_id)
    JOIN volunteers v ON v.id = vs.volunteer_id
    WHERE u.user_id = COALESCE(NEW.assigned_editor_id, OLD.assigned_editor_id);

    IF (TG_OP = 'INSERT') THEN
        -- New assignment created
        payload := jsonb_build_object(
            'event', 'new_assignment',
            'assignment_id', NEW.id,
            'video_submission_id', NEW.video_submission_id,
            'assigned_editor_id', NEW.assigned_editor_id,
            'assigned_editor_name', editor_name,
            'volunteer_name', submission_details.volunteer_name,
            'video_url', submission_details.video_platform_url,
            'status', NEW.status,
            'assigned_at', NEW.assigned_at,
            'submission_status', submission_details.submission_status
        );
        PERFORM pg_notify('editor_updates', payload::text);
        
    ELSIF (TG_OP = 'UPDATE') THEN
        -- Assignment status updated
        IF NEW.status IS DISTINCT FROM OLD.status OR 
           NEW.completed_video_url IS DISTINCT FROM OLD.completed_video_url OR
           NEW.editor_notes IS DISTINCT FROM OLD.editor_notes THEN
            payload := jsonb_build_object(
                'event', 'assignment_update',
                'assignment_id', NEW.id,
                'video_submission_id', NEW.video_submission_id,
                'assigned_editor_id', NEW.assigned_editor_id,
                'status', NEW.status,
                'completed_video_url', NEW.completed_video_url,
                'completed_at', NEW.completed_at,
                'editor_notes', NEW.editor_notes,
                'submission_status', submission_details.submission_status
            );
            PERFORM pg_notify('editor_updates', payload::text);
        END IF;
        
    ELSIF (TG_OP = 'DELETE') THEN
        -- Assignment cancelled/deleted
        payload := jsonb_build_object(
            'event', 'assignment_cancelled',
            'assignment_id', OLD.id,
            'video_submission_id', OLD.video_submission_id,
            'assigned_editor_id', OLD.assigned_editor_id
        );
        PERFORM pg_notify('editor_updates', payload::text);
        RETURN OLD;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Drop existing trigger if exists
DROP TRIGGER IF EXISTS video_assignment_updates ON video_assignments;

-- Create the trigger
CREATE TRIGGER video_assignment_updates
AFTER INSERT OR UPDATE OR DELETE ON video_assignments
FOR EACH ROW
EXECUTE FUNCTION notify_assignment_update();
